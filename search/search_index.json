{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"创世项目文档 准备 下载 安装Github Desktop 下载 安装Python 下载 安装VS Code 通过 pip install --upgrade pip 更新Python安装工具（Mac OS使用 pip3 ），如果出现 No module named 'pip' error 错误，通过命令 python -m ensurepip 修复 使用命令 pip install mkdocs 安装MKDocs 使用命令 pip install mkdocs-material 安装mkdocs-material 使用命令 pip install jieba 安装解霸 添加中文支持 进入python的安装目录修改search_index.py文件 Mac目录为 /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/mkdocs/contrib/search/，修改generate_search_index ，Windows系统参考相对路径 def generate_search_index(self): \"\"\"python to json conversion\"\"\" page_dicts = { 'docs': self._entries, 'config': self.config } for doc in page_dicts['docs']: tokens = list(set([token.lower() for token in jieba.cut_for_search(doc['title'].replace('\\n', ''), True)])) if '' in tokens: tokens.remove('') doc['title_tokens'] = tokens tokens = list(set([token.lower() for token in jieba.cut_for_search(doc['text'].replace('\\n', ''), True)])) if '' in tokens: tokens.remove('') doc['text_tokens'] = tokens data = json.dumps(page_dicts, sort_keys=True, separators=(',', ':'), ensure_ascii=False) if self.config['prebuild_index']: try: script_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'prebuild-index.js') p = subprocess.Popen( ['node', script_path], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE ) idx, err = p.communicate(data.encode('utf-8')) if not err: idx = idx.decode('utf-8') if hasattr(idx, 'decode') else idx page_dicts['index'] = json.loads(idx) data = json.dumps(page_dicts, sort_keys=True, separators=(',', ':'), ensure_ascii=False) log.debug('Pre-built search index created successfully.') else: log.warning('Failed to pre-build search index. Error: {}'.format(err)) except (OSError, IOError, ValueError) as e: log.warning('Failed to pre-build search index. Error: {}'.format(e)) return data 修改lunr.js Mac目录为 /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/mkdocs/contrib/search/templates/search/ 搜索lunr.Builder.prototype.add替换部分代码 // 仅替换前15行 lunr.Builder.prototype.add = function (doc, attributes) { var docRef = doc[this._ref], fields = Object.keys(this._fields) this._documents[docRef] = attributes || {} this.documentCount += 1 for (var i = 0; i < fields.length; i++) { var fieldName = fields[i], extractor = this._fields[fieldName].extractor, field = extractor ? extractor(doc) : doc[fieldName], tokens = doc[fieldName + '_tokens'], terms = this.pipeline.run(tokens), fieldRef = new lunr.FieldRef (docRef, fieldName), fieldTerms = Object.create(null) 搜索定位替换以下部分 lunr.trimmer = function (token) { return token.update(function (s) { return s.replace(/^\\s+/, '').replace(/\\s+$/, '') }) } 通过MKDocs更新文档 使用命令 git clone https://github.com/Yaluoo/docs-LowCodePlatform.git 克隆资源库 使用VS Code编辑文档并提交变更 使用MKDocs 打开命令行将目录切换至文档所在目录 本地运行 mkdocs serve","text_tokens":["successfully","python3.7","fields","upgrade","data","^","mac","debug","ioerror","系统","添加","attributes","$","clone","to","true","entries","trimmer","如果","至","通过","null","资源","create","js","config","pip3",".","创世","克隆","docref","工具","为","templates",",","s","failed","pipe","index","build","命令",":","(","com","进入","文档","中文","}","stderr","not","extractor","contrib","idx","false","|","n","lower","else","replace","支持","'","__","desktop","file","serve","loads","https","<","packages","8","vs","json","0","stdin",";","文件","doc","except","?","node","keys","popen","提交","remove","._","lowcodeplatform","library","ref","subprocess","lib","安装","no","set","field","所在","项目","行将","token","修复","目录","list","terms","communicate","object","sort","run","dicts"," ","warning","add","module","仅","join","的","{","utf","function","ascii","path","变更","相对","self","ensure","length","]","yaluoo","windows","15","separators","编辑","更新","dumps","decode","++","定位","相对路径","frameworks","\"","出现","os","fieldref","search","_","cut","err","versions","p","update","built","使用","\\","code","material","prototype","abspath","打开","prebuild","script","-","，","m","try","=","替换","named","路径","错误","修改","title","pipeline","dirname","format","并","github","1","tokens","部分","参考","in","代码","var","（","pre","as","[","本地","以下",")","created","git","前","资源库","framework","install","搜索","generate","new","docs","fieldname","+","return","下载","ensurepip","--","py","text","builder","切换","lunr","def","encode","oserror","documentcount","jieba","for","page","准备","if","error","log","site","编辑文档","hasattr","mkdocs","python","/","conversion","pip","行","i","this","运行","解霸","valueerror","e","）","documents","3.7","stdout","fieldterms"],"title":"创世项目文档","title_tokens":["文档","项目","创世"]},{"location":"#_1","text":"","text_tokens":[],"title":"创世项目文档","title_tokens":["文档","项目","创世"]},{"location":"#_2","text":"下载 安装Github Desktop 下载 安装Python 下载 安装VS Code 通过 pip install --upgrade pip 更新Python安装工具（Mac OS使用 pip3 ），如果出现 No module named 'pip' error 错误，通过命令 python -m ensurepip 修复 使用命令 pip install mkdocs 安装MKDocs 使用命令 pip install mkdocs-material 安装mkdocs-material 使用命令 pip install jieba 安装解霸","text_tokens":["github","upgrade","mac","更新","'","desktop","（","vs","出现","os","如果","通过","install","pip3","下载","使用","--","ensurepip","code","material","安装","no","工具","jieba","-","，","修复","error","命令","m","mkdocs","python"," ","pip","named","module","解霸","）","错误"],"title":"准备","title_tokens":["准备"]},{"location":"#_3","text":"","text_tokens":[],"title":"添加中文支持","title_tokens":["中文","支持","添加"]},{"location":"#pythonsearch_indexpy","text":"Mac目录为 /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/mkdocs/contrib/search/，修改generate_search_index ，Windows系统参考相对路径 def generate_search_index(self): \"\"\"python to json conversion\"\"\" page_dicts = { 'docs': self._entries, 'config': self.config } for doc in page_dicts['docs']: tokens = list(set([token.lower() for token in jieba.cut_for_search(doc['title'].replace('\\n', ''), True)])) if '' in tokens: tokens.remove('') doc['title_tokens'] = tokens tokens = list(set([token.lower() for token in jieba.cut_for_search(doc['text'].replace('\\n', ''), True)])) if '' in tokens: tokens.remove('') doc['text_tokens'] = tokens data = json.dumps(page_dicts, sort_keys=True, separators=(',', ':'), ensure_ascii=False) if self.config['prebuild_index']: try: script_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'prebuild-index.js') p = subprocess.Popen( ['node', script_path], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE ) idx, err = p.communicate(data.encode('utf-8')) if not err: idx = idx.decode('utf-8') if hasattr(idx, 'decode') else idx page_dicts['index'] = json.loads(idx) data = json.dumps(page_dicts, sort_keys=True, separators=(',', ':'), ensure_ascii=False) log.debug('Pre-built search index created successfully.') else: log.warning('Failed to pre-build search index. Error: {}'.format(err)) except (OSError, IOError, ValueError) as e: log.warning('Failed to pre-build search index. Error: {}'.format(e)) return data","text_tokens":["successfully","python3.7","data","mac","debug","ioerror","系统","to","true","entries","js","config",".","为",",","failed","pipe","index","build",":","(","}","stderr","not","contrib","idx","false","n","lower","else","replace","'","__","file","loads","packages","8","json","stdin","doc","except","node","keys","popen","remove","._","library","subprocess","lib","set","token","目录","list","communicate","sort","dicts"," ","warning","join","{","utf","ascii","path","相对","self","ensure","]","windows","separators","dumps","decode","相对路径","frameworks","\"","os","search","_","cut","err","versions","p","built","\\","abspath","prebuild","script","-","，","try","=","路径","修改","title","dirname","format","tokens","参考","in","pre","as","[",")","created","framework","generate","docs","return","text","def","encode","oserror","jieba","for","page","if","log","error","site","hasattr","mkdocs","/","python","conversion","valueerror","e","3.7","stdout"],"title":"进入python的安装目录修改search_index.py文件","title_tokens":["目录","index",".","进入","python","search","安装","文件","_","修改","的","py"]},{"location":"#lunrjs","text":"Mac目录为 /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/mkdocs/contrib/search/templates/search/ 搜索lunr.Builder.prototype.add替换部分代码 // 仅替换前15行 lunr.Builder.prototype.add = function (doc, attributes) { var docRef = doc[this._ref], fields = Object.keys(this._fields) this._documents[docRef] = attributes || {} this.documentCount += 1 for (var i = 0; i < fields.length; i++) { var fieldName = fields[i], extractor = this._fields[fieldName].extractor, field = extractor ? extractor(doc) : doc[fieldName], tokens = doc[fieldName + '_tokens'], terms = this.pipeline.run(tokens), fieldRef = new lunr.FieldRef (docRef, fieldName), fieldTerms = Object.create(null) 搜索定位替换以下部分 lunr.trimmer = function (token) { return token.update(function (s) { return s.replace(/^\\s+/, '').replace(/\\s+$/, '') }) }","text_tokens":["python3.7","fields","^","mac","attributes","$","trimmer","null","create",".","docref","为","templates",",","s",":","(","}","extractor","contrib","|","replace","'","<","packages","0",";","doc","?","keys","._","library","ref","lib","field","token","目录","terms","object","run"," ","add","仅","{","function","length","]","15","++","定位","frameworks","fieldref","search","_","versions","update","\\","prototype","-","替换","=","pipeline","1","tokens","部分","代码","var","[","以下",")","前","framework","搜索","new","fieldname","+","return","builder","lunr","documentcount","for","site","mkdocs","/","python","行","i","this","documents","3.7","fieldterms"],"title":"修改lunr.js","title_tokens":["修改","js","lunr","."]},{"location":"#mkdocs","text":"使用命令 git clone https://github.com/Yaluoo/docs-LowCodePlatform.git 克隆资源库 使用VS Code编辑文档并提交变更","text_tokens":["并","github","变更","yaluoo","编辑","clone","https","vs","git","资源库","资源","docs","提交","lowcodeplatform","使用","code",".","克隆","-","编辑文档","命令",":","com","/"," ","文档"],"title":"通过MKDocs更新文档","title_tokens":["mkdocs","通过","更新","文档"]},{"location":"#mkdocs_1","text":"打开命令行将目录切换至文档所在目录 本地运行 mkdocs serve","text_tokens":["目录","命令","本地","切换","运行","mkdocs","至"," ","打开","文档","所在","serve","行将"],"title":"使用MKDocs","title_tokens":["使用","mkdocs"]}]}