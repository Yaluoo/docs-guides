{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"项目说明 ¶ 亚鹿信息内部启动SAP低代码平台研发项目，代号 创世 ，项目计划2020年5月启动，2020年10月对外发布平台0.0.1版本。","text_tokens":["。","信息","研发","对外","0.0","年","低","sap","1",".","代号","月","5"," ","说明","平台","2020","10","内部","亚鹿","启动","发布","代码","¶","计划","版本","，","创世","项目"],"title":"项目说明","title_tokens":["项目","说明"]},{"location":"#_1","text":"亚鹿信息内部启动SAP低代码平台研发项目，代号 创世 ，项目计划2020年5月启动，2020年10月对外发布平台0.0.1版本。","text_tokens":["。","信息","研发","对外","0.0","年","低","sap","1",".","代号","月","5"," ","平台","2020","10","亚鹿","内部","启动","发布","代码","计划","版本","，","创世","项目"],"title":"项目说明","title_tokens":["项目","说明"]},{"location":"contents/docsdev/","text":"创世项目文档 ¶ 准备 ¶ 下载 安装Github Desktop 下载 安装Python 下载 安装VS Code 通过 pip install --upgrade pip 更新Python安装工具（Mac OS使用 pip3 ），如果出现 No module named 'pip' error 错误，通过命令 python -m ensurepip 修复 使用命令 pip install mkdocs 安装MKDocs 使用命令 pip install mkdocs-material 安装mkdocs-material 使用命令 pip install jieba 安装解霸 添加中文支持 ¶ 进入python的安装目录修改search_index.py文件 ¶ Mac目录为 /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/mkdocs/contrib/search/，修改generate_search_index ，Windows系统参考相对路径 def generate_search_index ( self ): \"\"\"python to json conversion\"\"\" page_dicts = { 'docs' : self . _entries , 'config' : self . config } for doc in page_dicts [ 'docs' ]: tokens = list ( set ([ token . lower () for token in jieba . cut_for_search ( doc [ 'title' ] . replace ( ' \\n ' , '' ), True )])) if '' in tokens : tokens . remove ( '' ) doc [ 'title_tokens' ] = tokens tokens = list ( set ([ token . lower () for token in jieba . cut_for_search ( doc [ 'text' ] . replace ( ' \\n ' , '' ), True )])) if '' in tokens : tokens . remove ( '' ) doc [ 'text_tokens' ] = tokens data = json . dumps ( page_dicts , sort_keys = True , separators = ( ',' , ':' ), ensure_ascii = False ) if self . config [ 'prebuild_index' ]: try : script_path = os . path . join ( os . path . dirname ( os . path . abspath ( __file__ )), 'prebuild-index.js' ) p = subprocess . Popen ( [ 'node' , script_path ], stdin = subprocess . PIPE , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) idx , err = p . communicate ( data . encode ( 'utf-8' )) if not err : idx = idx . decode ( 'utf-8' ) if hasattr ( idx , 'decode' ) else idx page_dicts [ 'index' ] = json . loads ( idx ) data = json . dumps ( page_dicts , sort_keys = True , separators = ( ',' , ':' ), ensure_ascii = False ) log . debug ( 'Pre-built search index created successfully.' ) else : log . warning ( 'Failed to pre-build search index. Error: {} ' . format ( err )) except ( OSError , IOError , ValueError ) as e : log . warning ( 'Failed to pre-build search index. Error: {} ' . format ( e )) return data 修改lunr.js ¶ Mac目录为 /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/mkdocs/contrib/search/templates/search/ 搜索lunr.Builder.prototype.add替换部分代码 // 仅替换前15行 lunr . Builder . prototype . add = function ( doc , attributes ) { var docRef = doc [ this . _ref ], fields = Object . keys ( this . _fields ) this . _documents [ docRef ] = attributes || {} this . documentCount += 1 for ( var i = 0 ; i < fields . length ; i ++ ) { var fieldName = fields [ i ], extractor = this . _fields [ fieldName ]. extractor , field = extractor ? extractor ( doc ) : doc [ fieldName ], tokens = doc [ fieldName + '_tokens' ], terms = this . pipeline . run ( tokens ), fieldRef = new lunr . FieldRef ( docRef , fieldName ), fieldTerms = Object . create ( null ) 搜索定位替换以下部分 lunr . trimmer = function ( token ) { return token . update ( function ( s ) { return s . replace ( /^\\s+/ , '' ). replace ( /\\s+$/ , '' ) }) } 通过MKDocs更新文档 ¶ 使用命令 git clone https://github.com/Yaluoo/docs-LowCodePlatform.git 克隆资源库 使用VS Code编辑文档并提交变更 使用MKDocs ¶ 打开命令行将目录切换至文档所在目录 本地运行 mkdocs serve","text_tokens":["format","打开","vs","至","lib","error","出现","dirname","__","token","create","self","系统","(","title","前",".","文档","successfully","set","支持","err","material","yaluoo","versions","else","资源","变更","library","node","pip3","修改","for","stderr","运行","?","jieba","warning","代码","n","）","index","修复","p","com","log","，","相对路径","项目","++","编辑",":","命令","decode","fieldname","stdout","fieldterms","路径","pipeline","/","i","更新","oserror","script","js","as","documents","1","fieldref","docref","github","}","hasattr","git","serve","communicate","function","prebuild","popen","克隆","进入","{","null","'","desktop","mkdocs","packages"," ","]","lunr","try","python","3.7","dicts","doc","idx","行将","install","通过","pip","相对","debug","行","=","资源库","¶","使用","loads","created","to","\"","clone","https","ioerror","entries","module","添加","config","file","切换","pre","8","conversion","ensure","run","utf","keys","terms","文件","built","ensurepip","framework","add","编辑文档",")","安装","ref","failed","field","dumps","frameworks","本地","替换","lower","的","--","upgrade","builder","data","s","python3.7","所在","windows","build","0","subprocess","mac","\\","fields","tokens","$","list","length","|","docs",";","abspath","def","named","encode","os","[","定位","generate","object","（","参考","search","in","templates","准备","text","attributes","-","not","仅","contrib","sort","this","错误","new","valueerror","except","pipe","部分","搜索","false","site","工具","extractor","path","return","var","m","code","_","目录","join","+","remove","cut","no","如果","if","trimmer","并","update","中文","json","documentcount","以下","py","replace","e","提交","^","true","<",",","lowcodeplatform","stdin","prototype","separators","创世","为","15","解霸","page","ascii","下载"],"title":"项目文档管理工具","title_tokens":["工具","管理","文档","项目","理工","管理工具"]},{"location":"contents/docsdev/#_1","text":"","text_tokens":[],"title":"创世项目文档","title_tokens":["项目","文档","创世"]},{"location":"contents/docsdev/#_2","text":"下载 安装Github Desktop 下载 安装Python 下载 安装VS Code 通过 pip install --upgrade pip 更新Python安装工具（Mac OS使用 pip3 ），如果出现 No module named 'pip' error 错误，通过命令 python -m ensurepip 修复 使用命令 pip install mkdocs 安装MKDocs 使用命令 pip install mkdocs-material 安装mkdocs-material 使用命令 pip install jieba 安装解霸","text_tokens":["-","错误","vs","ensurepip","更新","出现","error","工具","安装","m","github","code","--","upgrade","no","material","如果","'","desktop","mkdocs"," ","mac","python","pip3","install","通过","pip","jieba","使用","named","os","）","修复","module","（","，","解霸","命令","下载"],"title":"准备","title_tokens":["准备"]},{"location":"contents/docsdev/#_3","text":"","text_tokens":[],"title":"添加中文支持","title_tokens":["支持","添加","中文"]},{"location":"contents/docsdev/#pythonsearch_indexpy","text":"Mac目录为 /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/mkdocs/contrib/search/，修改generate_search_index ，Windows系统参考相对路径 def generate_search_index ( self ): \"\"\"python to json conversion\"\"\" page_dicts = { 'docs' : self . _entries , 'config' : self . config } for doc in page_dicts [ 'docs' ]: tokens = list ( set ([ token . lower () for token in jieba . cut_for_search ( doc [ 'title' ] . replace ( ' \\n ' , '' ), True )])) if '' in tokens : tokens . remove ( '' ) doc [ 'title_tokens' ] = tokens tokens = list ( set ([ token . lower () for token in jieba . cut_for_search ( doc [ 'text' ] . replace ( ' \\n ' , '' ), True )])) if '' in tokens : tokens . remove ( '' ) doc [ 'text_tokens' ] = tokens data = json . dumps ( page_dicts , sort_keys = True , separators = ( ',' , ':' ), ensure_ascii = False ) if self . config [ 'prebuild_index' ]: try : script_path = os . path . join ( os . path . dirname ( os . path . abspath ( __file__ )), 'prebuild-index.js' ) p = subprocess . Popen ( [ 'node' , script_path ], stdin = subprocess . PIPE , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) idx , err = p . communicate ( data . encode ( 'utf-8' )) if not err : idx = idx . decode ( 'utf-8' ) if hasattr ( idx , 'decode' ) else idx page_dicts [ 'index' ] = json . loads ( idx ) data = json . dumps ( page_dicts , sort_keys = True , separators = ( ',' , ':' ), ensure_ascii = False ) log . debug ( 'Pre-built search index created successfully.' ) else : log . warning ( 'Failed to pre-build search index. Error: {} ' . format ( err )) except ( OSError , IOError , ValueError ) as e : log . warning ( 'Failed to pre-build search index. Error: {} ' . format ( e )) return data","text_tokens":["format","lib","__","error","dirname","token","self","系统","(","title",".","successfully","set","err","versions","else","library","node","修改","for","stderr","jieba","warning","n","index","p","log","，","相对路径",":","decode","stdout","路径","/","oserror","script","js","as","}","hasattr","communicate","prebuild","popen","{","'","mkdocs","packages"," ","]","try","python","3.7","dicts","doc","idx","相对","debug","=","loads","created","to","\"","ioerror","entries","config","file","pre","8","conversion","ensure","utf","keys","built","framework",")","failed","dumps","frameworks","lower","data","python3.7","windows","build","subprocess","mac","\\","tokens","list","docs","abspath","def","encode","[","os","generate","参考","search","in","text","-","not","contrib","sort","valueerror","except","pipe","false","site","path","return","_","join","目录","remove","cut","if","json","replace","e","true",",","stdin","separators","为","page","ascii"],"title":"进入python的安装目录修改search_index.py文件","title_tokens":["安装","py",".","index","文件","python","_","目录","的","search","修改","进入"]},{"location":"contents/docsdev/#lunrjs","text":"Mac目录为 /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/mkdocs/contrib/search/templates/search/ 搜索lunr.Builder.prototype.add替换部分代码 // 仅替换前15行 lunr . Builder . prototype . add = function ( doc , attributes ) { var docRef = doc [ this . _ref ], fields = Object . keys ( this . _fields ) this . _documents [ docRef ] = attributes || {} this . documentCount += 1 for ( var i = 0 ; i < fields . length ; i ++ ) { var fieldName = fields [ i ], extractor = this . _fields [ fieldName ]. extractor , field = extractor ? extractor ( doc ) : doc [ fieldName ], tokens = doc [ fieldName + '_tokens' ], terms = this . pipeline . run ( tokens ), fieldRef = new lunr . FieldRef ( docRef , fieldName ), fieldTerms = Object . create ( null ) 搜索定位替换以下部分 lunr . trimmer = function ( token ) { return token . update ( function ( s ) { return s . replace ( /^\\s+/ , '' ). replace ( /\\s+$/ , '' ) }) }","text_tokens":["lib","create","token","(","前",".","versions","library","for","?","代码","++",":","fieldname","fieldterms","pipeline","/","i","documents","1","fieldref","docref","}","function","{","null","'","mkdocs","packages"," ","]","lunr","python","3.7","doc","行","=","run","keys","terms","framework","add",")","field","ref","frameworks","替换","builder","s","python3.7","0","mac","\\","fields","tokens","$","length","|",";","[","定位","object","search","templates","attributes","-","仅","this","contrib","new","部分","搜索","site","extractor","var","return","_","目录","+","trimmer","update","documentcount","以下","replace","^","<",",","prototype","为","15"],"title":"修改lunr.js","title_tokens":[".","js","修改","lunr"]},{"location":"contents/docsdev/#mkdocs","text":"使用命令 git clone https://github.com/Yaluoo/docs-LowCodePlatform.git 克隆资源库 使用VS Code编辑文档并提交变更","text_tokens":["-","/","vs","编辑文档",".","文档","github","git","code","克隆","yaluoo","并","资源","变更"," ","提交","lowcodeplatform","docs","资源库","使用","clone","https","com","编辑",":","命令"],"title":"通过MKDocs更新文档","title_tokens":["文档","更新","通过","mkdocs"]},{"location":"contents/docsdev/#mkdocs_1","text":"打开命令行将目录切换至文档所在目录 本地运行 mkdocs serve","text_tokens":["所在","mkdocs"," ","文档","本地","serve","打开","目录","切换","行将","至","运行","命令"],"title":"使用MKDocs","title_tokens":["使用","mkdocs"]}]}