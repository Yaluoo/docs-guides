{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"亚鹿信息内部启动SAP低代码平台研发项目，代号 创世 ，项目计划2020年5月启动，2020年10月对外发布平台0.0.1版本。","text_tokens":["1","内部","低","信息","月","对外","10","亚鹿","创世","发布","0.0",".","代号","项目","，","。","sap","计划"," ","年","2020","代码","研发","启动","版本","平台","5"],"title":"Home","title_tokens":["home"]},{"location":"contents/docsdev/","text":"创世项目文档 ¶ 准备 ¶ 下载 安装Github Desktop 下载 安装Python 下载 安装VS Code 通过 pip install --upgrade pip 更新Python安装工具（Mac OS使用 pip3 ），如果出现 No module named 'pip' error 错误，通过命令 python -m ensurepip 修复 使用命令 pip install mkdocs 安装MKDocs 使用命令 pip install mkdocs-material 安装mkdocs-material 使用命令 pip install jieba 安装解霸 添加中文支持 ¶ 进入python的安装目录修改search_index.py文件 ¶ Mac目录为 /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/mkdocs/contrib/search/，修改generate_search_index ，Windows系统参考相对路径 def generate_search_index ( self ): \"\"\"python to json conversion\"\"\" page_dicts = { 'docs' : self . _entries , 'config' : self . config } for doc in page_dicts [ 'docs' ]: tokens = list ( set ([ token . lower () for token in jieba . cut_for_search ( doc [ 'title' ] . replace ( ' \\n ' , '' ), True )])) if '' in tokens : tokens . remove ( '' ) doc [ 'title_tokens' ] = tokens tokens = list ( set ([ token . lower () for token in jieba . cut_for_search ( doc [ 'text' ] . replace ( ' \\n ' , '' ), True )])) if '' in tokens : tokens . remove ( '' ) doc [ 'text_tokens' ] = tokens data = json . dumps ( page_dicts , sort_keys = True , separators = ( ',' , ':' ), ensure_ascii = False ) if self . config [ 'prebuild_index' ]: try : script_path = os . path . join ( os . path . dirname ( os . path . abspath ( __file__ )), 'prebuild-index.js' ) p = subprocess . Popen ( [ 'node' , script_path ], stdin = subprocess . PIPE , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) idx , err = p . communicate ( data . encode ( 'utf-8' )) if not err : idx = idx . decode ( 'utf-8' ) if hasattr ( idx , 'decode' ) else idx page_dicts [ 'index' ] = json . loads ( idx ) data = json . dumps ( page_dicts , sort_keys = True , separators = ( ',' , ':' ), ensure_ascii = False ) log . debug ( 'Pre-built search index created successfully.' ) else : log . warning ( 'Failed to pre-build search index. Error: {} ' . format ( err )) except ( OSError , IOError , ValueError ) as e : log . warning ( 'Failed to pre-build search index. Error: {} ' . format ( e )) return data 修改lunr.js ¶ Mac目录为 /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/mkdocs/contrib/search/templates/search/ 搜索lunr.Builder.prototype.add替换部分代码 // 仅替换前15行 lunr . Builder . prototype . add = function ( doc , attributes ) { var docRef = doc [ this . _ref ], fields = Object . keys ( this . _fields ) this . _documents [ docRef ] = attributes || {} this . documentCount += 1 for ( var i = 0 ; i < fields . length ; i ++ ) { var fieldName = fields [ i ], extractor = this . _fields [ fieldName ]. extractor , field = extractor ? extractor ( doc ) : doc [ fieldName ], tokens = doc [ fieldName + '_tokens' ], terms = this . pipeline . run ( tokens ), fieldRef = new lunr . FieldRef ( docRef , fieldName ), fieldTerms = Object . create ( null ) 搜索定位替换以下部分 lunr . trimmer = function ( token ) { return token . update ( function ( s ) { return s . replace ( /^\\s+/ , '' ). replace ( /\\s+$/ , '' ) }) } 通过MKDocs更新文档 ¶ 使用命令 git clone https://github.com/Yaluoo/docs-LowCodePlatform.git 克隆资源库 使用VS Code编辑文档并提交变更 使用MKDocs ¶ 打开命令行将目录切换至文档所在目录 本地运行 mkdocs serve","text_tokens":["）","length","修复","ensurepip","i","使用","error","lib","^","no","{","行将","pip","通过","json","subprocess","ioerror","pre","named","ensure","communicate","更新","p","hasattr","搜索","https",".","py","text","|","decode","__","title","set","支持","如果","clone","build","token","null","yaluoo","file","所在","dicts","}","tokens","js","not","<","$","fieldterms","切换","git","本地","dumps","部分","false","to","stdin","_","doc","文档","编辑文档","self","相对路径","os","path","\\","builder","code","entries","encode","if","valueerror","至","资源库","前","lowcodeplatform","library",";","安装","为","update","错误","创世","lunr","¶","sort","add","/","debug","e","15","packages",":","ref","docref","资源","dirname","ascii","frameworks","以下","\"","+","stdout","built","terms","documentcount","popen","material","data","versions","代码","(","]","list","目录","修改","documents","prebuild","?","参考","0","keys","命令","pip3","format","def","conversion","系统","except","github","this","提交","prototype","cut","run","pipe","s","（","准备","page","替换","-","文件","行","仅","new","克隆","index","fieldname","config","定位","并","路径","contrib","created","，","join","=","docs","loads","failed",")","windows","separators","mkdocs","lower"," ","fields","mac","中文","warning","err","attributes","下载","as","in","framework","jieba","python","templates","module","1","进入","的","log","field","运行","node","var","site","[",",","com","script","idx","create","8","successfully","python3.7","return","remove","desktop","解霸","++","generate","replace","vs","项目","添加","stderr","pipeline","abspath","m","function","utf","3.7","else","fieldref","变更","serve","object","--","编辑","search","打开","相对","'","n","出现","install","true","oserror","for","工具","trimmer","try","upgrade","extractor"],"title":"项目文档","title_tokens":["项目","文档"]},{"location":"contents/docsdev/#_1","text":"","text_tokens":[],"title":"创世项目文档","title_tokens":["创世","项目","文档"]},{"location":"contents/docsdev/#_2","text":"下载 安装Github Desktop 下载 安装Python 下载 安装VS Code 通过 pip install --upgrade pip 更新Python安装工具（Mac OS使用 pip3 ），如果出现 No module named 'pip' error 错误，通过命令 python -m ensurepip 修复 使用命令 pip install mkdocs 安装MKDocs 使用命令 pip install mkdocs-material 安装mkdocs-material 使用命令 pip install jieba 安装解霸","text_tokens":["os","）","修复","ensurepip","code","module","使用","error","no","安装","错误","pip","通过","（","named","jieba","-","更新","desktop","解霸","vs","m","，","如果","--","mkdocs"," ","material","'","mac","出现","下载","install","命令","工具","pip3","python","upgrade","github"],"title":"准备","title_tokens":["准备"]},{"location":"contents/docsdev/#_3","text":"","text_tokens":[],"title":"添加中文支持","title_tokens":["中文","支持","添加"]},{"location":"contents/docsdev/#pythonsearch_indexpy","text":"Mac目录为 /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/mkdocs/contrib/search/，修改generate_search_index ，Windows系统参考相对路径 def generate_search_index ( self ): \"\"\"python to json conversion\"\"\" page_dicts = { 'docs' : self . _entries , 'config' : self . config } for doc in page_dicts [ 'docs' ]: tokens = list ( set ([ token . lower () for token in jieba . cut_for_search ( doc [ 'title' ] . replace ( ' \\n ' , '' ), True )])) if '' in tokens : tokens . remove ( '' ) doc [ 'title_tokens' ] = tokens tokens = list ( set ([ token . lower () for token in jieba . cut_for_search ( doc [ 'text' ] . replace ( ' \\n ' , '' ), True )])) if '' in tokens : tokens . remove ( '' ) doc [ 'text_tokens' ] = tokens data = json . dumps ( page_dicts , sort_keys = True , separators = ( ',' , ':' ), ensure_ascii = False ) if self . config [ 'prebuild_index' ]: try : script_path = os . path . join ( os . path . dirname ( os . path . abspath ( __file__ )), 'prebuild-index.js' ) p = subprocess . Popen ( [ 'node' , script_path ], stdin = subprocess . PIPE , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) idx , err = p . communicate ( data . encode ( 'utf-8' )) if not err : idx = idx . decode ( 'utf-8' ) if hasattr ( idx , 'decode' ) else idx page_dicts [ 'index' ] = json . loads ( idx ) data = json . dumps ( page_dicts , sort_keys = True , separators = ( ',' , ':' ), ensure_ascii = False ) log . debug ( 'Pre-built search index created successfully.' ) else : log . warning ( 'Failed to pre-build search index. Error: {} ' . format ( err )) except ( OSError , IOError , ValueError ) as e : log . warning ( 'Failed to pre-build search index. Error: {} ' . format ( e )) return data","text_tokens":["error","lib","{","subprocess","ioerror","json","pre","ensure","communicate","p","hasattr",".","text","decode","__","title","set","build","token","file","dicts","}","tokens","js","not","dumps","false","to","stdin","_","doc","self","相对路径","path","os","\\","entries","encode","if","valueerror","library","为","sort","/","debug","e","packages",":","dirname","ascii","frameworks","\"","built","popen","data","versions","(","]","list","目录","修改","prebuild","参考","keys","format","conversion","def","系统","except","cut","pipe","page","-","index","config","路径","contrib","created","，","join","=","docs","loads","failed",")","windows","separators","mkdocs","lower"," ","mac","warning","err","as","in","framework","jieba","python","log","node","site","[",",","script","idx","8","successfully","python3.7","return","remove","generate","replace","stderr","abspath","utf","3.7","else","search","相对","'","n","true","oserror","for","stdout","try"],"title":"进入python的安装目录修改search_index.py文件","title_tokens":["进入","的","目录","修改","文件",".","py","search","_","index","安装","python"]},{"location":"contents/docsdev/#lunrjs","text":"Mac目录为 /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/mkdocs/contrib/search/templates/search/ 搜索lunr.Builder.prototype.add替换部分代码 // 仅替换前15行 lunr . Builder . prototype . add = function ( doc , attributes ) { var docRef = doc [ this . _ref ], fields = Object . keys ( this . _fields ) this . _documents [ docRef ] = attributes || {} this . documentCount += 1 for ( var i = 0 ; i < fields . length ; i ++ ) { var fieldName = fields [ i ], extractor = this . _fields [ fieldName ]. extractor , field = extractor ? extractor ( doc ) : doc [ fieldName ], tokens = doc [ fieldName + '_tokens' ], terms = this . pipeline . run ( tokens ), fieldRef = new lunr . FieldRef ( docRef , fieldName ), fieldTerms = Object . create ( null ) 搜索定位替换以下部分 lunr . trimmer = function ( token ) { return token . update ( function ( s ) { return s . replace ( /^\\s+/ , '' ). replace ( /\\s+$/ , '' ) }) }","text_tokens":["length","i","lib","^","{","搜索",".","|","null","token","}","tokens","<","$","fieldterms","部分","_","doc","\\","builder","前","library",";","为","update","lunr","add","/","15","packages",":","ref","docref","frameworks","以下","+","terms","documentcount","versions","代码","(","]","目录","documents","?","0","keys","this","prototype","run","s","替换","-","行","仅","new","定位","fieldname","contrib","=",")","mkdocs"," ","fields","mac","attributes","framework","templates","python","1","field","var","site","[",",","create","python3.7","return","++","replace","pipeline","fieldref","function","3.7","object","search","'","for","trimmer","extractor"],"title":"修改lunr.js","title_tokens":["lunr","修改","js","."]},{"location":"contents/docsdev/#mkdocs","text":"使用命令 git clone https://github.com/Yaluoo/docs-LowCodePlatform.git 克隆资源库 使用VS Code编辑文档并提交变更","text_tokens":["提交","code","使用","资源库","lowcodeplatform","com","-","https","/",".","克隆",":","并","vs","资源","变更","clone","docs","编辑","yaluoo"," ","git","命令","文档","编辑文档","github"],"title":"通过MKDocs更新文档","title_tokens":["文档","更新","mkdocs","通过"]},{"location":"contents/docsdev/#mkdocs_1","text":"打开命令行将目录切换至文档所在目录 本地运行 mkdocs serve","text_tokens":["serve","切换","目录","运行","本地","文档","至","打开","命令","所在","行将"," ","mkdocs"],"title":"使用MKDocs","title_tokens":["mkdocs","使用"]}]}